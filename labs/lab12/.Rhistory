beta0 = 1
beta1 = 20
x = runif(100,0,1)
e=rnorm(100,0,sd = beta0+beta1*x)
y = beta0+beta1*x+e
lmod = lm(y ~ x)
plot(lmod$residuals ~ x)
plot(lmod$residuals ~ lmod$fitted.values)
lmodb = lm(ly ~ x)
ly = log10(y + 1 - min(y))
lmodb = lm(ly ~ x)
plot(lmodb$residuals,x)
plot(lmodb$residuals ~ x)
y
min(y)
y+1-min(u)
y+1-min(y)
min(y)
y-min(y)
e = rnorm(300)
X = replicate(3, runif(300))
y = 3+X[,1]+5*X[,2]+4*2.71828^(2*X[,3]) + e
x1 = X[,1]
x2 = X[,2]
x3 = X[,3]
lmod = lm(y ~ x1+x2+x3)
crPlots(lmod)
library(e1071)
library(car)
e = rnorm(300)
X = replicate(3, runif(300))
y = 3+X[,1]+5*X[,2]+4*2.71828^(2*X[,3]) + e
x1 = X[,1]
x2 = X[,2]
x3 = X[,3]
lmod = lm(y ~ x1+x2+x3)
crPlots(lmod)
x3l = 2.7183^(2*x3)
lmod = lm(y ~ x1+x2+x3l)
crPlots(lmod)
a = lm(height ~ weight, women)
a$coefficients
summary(a)
cor(women$height, women$weight)
cor(a$fitted.values, women$weight)
cor(a$fitted.values, women$height)
0.44^2
0.991^2
0.9903^2
y=women$height
x=women$weight
(y-mean(y))/sd(y)/((x-mean(x))/sd(x))
y=women$height
x=women$weight
a = (y-mean(y))/sd(y)
b = (x-mean(x))/sd(x)
a/b
y=women$height
x=women$weight
s= lm(y ~ x)
beta1 = s$coefficent
y-mean(ybe)
beta1
beta1 = s$coefficents
beta1
s$coefficents
s$coefficients
beta1 = s$coefficients[1]
beta1
beta1 = s$coefficients[2]
beta1
beta1 *sd(x)/sd(y)
lmod = lm(y ~ x1+x2+x3)
e = rnorm(300)
X = replicate(3, runif(300))
y = 3+X[,1]+5*X[,2]+4*2.71828^(2*X[,3]) + e
x1 = X[,1]
x2 = X[,2]
x3 = X[,3]
lmod = lm(y ~ x1+x2+x3)
llmod
lmod
summary(lmod)
cor(lmod$fitted.values,y)
knitr::opts_chunk$set(
cache=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE,
results = 'markup', dev='png', dpi=150
)
# load the data
spam_data <- read.csv('./SPAM.csv')
spam_data_train <- spam_data[spam_data$testid == FALSE, ]
spam_data_train <- spam_data_train[, -2] # remove the testid column
spam_data_test <- spam_data[spam_data$testid == TRUE, ]
spam_data_test <- spam_data_test[, -2]
head(spam_data)
rm(list=ls())
# load the data
spam_data <- read.csv('./SPAM.csv')
spam_data_train <- spam_data[spam_data$testid == FALSE, ]
spam_data_train <- spam_data_train[, -2] # remove the testid column
spam_data_test <- spam_data[spam_data$testid == TRUE, ]
spam_data_test <- spam_data_test[, -2]
head(spam_data)
View(spam_data)
table(spam_data$testid)
View(spam_data_test)
View(spam_data_train)
logistic_model <- glm(spam ~ ., data = spam_data_train, family = binomial)
summary(logistic_model)
get_predictions <- function(logistic_model, data){
# returns binary predictions for the logistic model on given data
# notice the type argument: this returns the probs
spam_probs <-
predict(logistic_model, newdata = data, type = 'response')
# our predictiosn for spam
spam_preds <- spam_probs > 0.5
return(spam_preds)
}
spam_preds  <- get_predictions(logistic_model, spam_data_train)
# accuracy on the train set
mean(spam_preds == spam_data_train$spam)
# Add the image to a batch where it's the only member.
img = (np.expand_dims(img,0))
print(img.shape)
predict(logistic_model, newdata = spam_data_train, type = 'response')
spam_preds  <- get_predictions(logistic_model, spam_data_train)
table(spam_data)
table(spam_preds)
spam_preds  <- get_predictions(logistic_model, spam_data_train)
spam_data_train$spam
spam_data_train$spam
View(spam_data_train)
spam_data_train$spam == FALSE
spam_preds
spam_preds == spam_data_train$spam
sum(spam_preds == spam_data_train$spam)
sum(spam_preds == spam_data_train$spam)/length(spam_data_train$spam)
spam_preds_test <- get_predictions(logistic_model, spam_data_test)
# accuracy on the test set
mean(spam_preds_test == spam_data_test$spam)
library("scatterplot3d")
install.packages("scatterplot3d")
library("scatterplot3d")
load('./galaxy.RData')
scatterplot3d(x = -galaxy_df$redshifts,
y = galaxy_df$magnitudes,
z = galaxy_df$counts, pch = 16, type="h",
xlab = '-redshift',
ylab = 'magnitude',
zlab = 'counts')
library(plotly)
packageVersion('plotly')
library(plotly)
packageVersion('plotly')
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter3d-basic")
ys.setenv("plotly_username"="caojilin")
Sys.setenv("plotly_username"="caojilin")
Sys.setenv("plotly_username"="caojilin")
Sys.setenv("plotly_api_key"="sEHPdprSHJRhMYNQk2HN")
p <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
api_create(p, filename = "r-docs-midwest-boxplots")
knitr::opts_chunk$set(
cache=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE,
results = 'markup', dev='png', dpi=150
)
# accuracy on the train set
mean(spam_preds == spam_data_train$spam)
# accuracy on the test set
mean(spam_preds_test == spam_data_test$spam)
View(spam_data_test)
View(spam_data_train)
get_predictions <- function(logistic_model, data){
# returns binary predictions for the logistic model on given data
# notice the type argument: this returns the probs
spam_probs <-
predict(logistic_model, newdata = data, type = 'response')
# our predictiosn for spam
spam_preds <- spam_probs > 0.7
return(spam_preds)
}
spam_preds  <- get_predictions(logistic_model, spam_data_train)
# accuracy on the train set
mean(spam_preds == spam_data_train$spam)
spam_preds_test <- get_predictions(logistic_model, spam_data_test)
# accuracy on the test set
mean(spam_preds_test == spam_data_test$spam)
get_predictions <- function(logistic_model, data){
# returns binary predictions for the logistic model on given data
# notice the type argument: this returns the probs
spam_probs <-
predict(logistic_model, newdata = data, type = 'response')
# our predictiosn for spam
spam_preds <- spam_probs > 0.5
return(spam_preds)
}
spam_preds  <- get_predictions(logistic_model, spam_data_train)
# accuracy on the train set
mean(spam_preds == spam_data_train$spam)
spam_preds_test <- get_predictions(logistic_model, spam_data_test)
# accuracy on the test set
mean(spam_preds_test == spam_data_test$spam)
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
# Provides a large number of functions from numerical analysis and linear algebra, numerical optimization, differential equations, time series, plus some well-known special mathematical functions. Uses 'MATLAB' function names where appropriate to simplify porting.
body = read.csv("Bodyfat.csv")
xmat = matrix(0, nrow(body), 5)
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$Age
xmat[,3] = body$Weight
xmat[,4] = body$Height
xmat[,5] = body$Age + 10*body$Weight + 3*body$Height
lmod1 = lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight + 3*Height), data = body)
summary(lmod1)$coefficients
sum(lmod1$residuals)
lmod2 = lm(bodyfat ~ Age + Weight + Height + Wrist, data = body)
sum(lmod2$residuals)
lmod3 = lm(bodyfat ~ Age, data = body)
sum(lmod3$residuals)
View(body)
lmod3 = lm(bodyfat ~ Ankle, data = body)
sum(lmod3$residuals)
lmod1 = lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight + 3*Height), data = body)
summary(lmod1)$coefficients
summary(lmod1)
lmod2 = lm(bodyfat ~ Age + Weight + Height + Wrist, data = body)
summary(lmod2)
lmod3 = lm(bodyfat ~ Ankle, data = body)
sum(lmod3$residuals)
summary(lmod3)
lmod3 = lm(bodyfat ~ Ankle, data = body)
summary(lmod3)
lmod = lm(height ~ weight, women)
rm(list = ls())
lmod = lm(height ~ weight, women)
summary(lmod)
fitted = lmod$fitted.values
y = women$height
cor(y, fitted)
0.44^2
x = women$weight
cor(x, fitted)
fitted
cor(x, fitted)
cor(y, fitted)
cor(y, fitted)
0.991^2
sqrt(0.991)
sqrt(0.991)
summary(lmod)
0.287249*sd(x)/sd(y)
0.995494^2
cars
mtcars
lmod2 = lm(mpg ~ disp + drat)
lmod2 = lm(mpg ~ disp + drat,data=mtcars)
summary(lmod2)
lmod2 = lm(mpg ~ disp,data=mtcars)
summary(lmod2)
fitted = lmod2$fitted.values
y = mtcars$mpg
x = mtcars$disp
-0.041215*sd(x)/sd(y)
-0.8475489^@
-0.8475489^2
(-0.041215*sd(x)/sd(y))^2
lmod2 = lm(mpg ~ disp+drat,data=mtcars)
summary(lmod2)
lmod2 = lm(mpg ~ disp+drat,data=mtcars)
summary(lmod2)
lmod2 = lm(mpg ~ disp+drat,data=mtcars)
summary(lmod2)
lmod2 = lm(mpg ~ disp+cyl,data=mtcars)
summary(lmod2)
fitted = lmod2$fitted.values
y = mtcars$mpg
cor(fitted, y)
a = 0.7596
sqrt(a)
?cor
cor(fitted, y,method = 'pearson')
lmod = lm(height ~ weight, women)
summary(lmod)
fitted = lmod$fitted.values
y = women$height
x = women$weight
cor(y, fitted)
sqrt(0.991)
cor(y,x)
cor(y,fitted)
install.packages(c("knitr", "scatterplot3d"))
knitr::opts_chunk$set(
cache=TRUE, warning=FALSE, error=FALSE, message=FALSE, echo=TRUE,
results = 'markup', dev='png', dpi=150
)
# load the data
spam_data <- read.csv('./SPAM.csv')
spam_data_train <- spam_data[spam_data$testid == FALSE, ]
spam_data_train <- spam_data_train[, -2] # remove the testid column
spam_data_test <- spam_data[spam_data$testid == TRUE, ]
spam_data_test <- spam_data_test[, -2]
head(spam_data)
logistic_model <- glm(spam ~ ., data = spam_data_train, family = binomial)
summary(logistic_model)
get_predictions <- function(logistic_model, data){
# returns binary predictions for the logistic model on given data
# notice the type argument: this returns the probs
spam_probs <-
predict(logistic_model, newdata = data, type = 'response')
# our predictiosn for spam
spam_preds <- spam_probs > 0.5
return(spam_preds)
}
spam_preds  <- get_predictions(logistic_model, spam_data_train)
# accuracy on the train set
mean(spam_preds == spam_data_train$spam)
spam_preds_test <- get_predictions(logistic_model, spam_data_test)
# accuracy on the test set
mean(spam_preds_test == spam_data_test$spam)
install.packages('mlbench')
data(Sonar, package="mlbench")
View(Sonar)
Sonar[,61] = as.numeric(Sonar[,61])-1
View(Sonar)
rm(Sonar)
data(Sonar, package="mlbench")
View(Sonar)
Sonar[,61] = as.numeric(Sonar[,61])-1
rm(Sonar)
data(Sonar, package="mlbench")
as.numeric(Sonar[,61])
Sonar[,61] = as.numeric(Sonar[,61])-1
spam_data_train
train.x = spam_data_train[-1,]
train.y = spam_data_train$spam
View(train.x)
train.x = spam_data_train[,-1]
View(train.x)
train.y = spam_data_train$spam
train.x = spam_data_train[,-1]
model = mx.mlp(train.x, train.y, hidden_node=10,  out_node=2,out_activation="softmax",num.round=20,array.batch.size=15,learning.rate=0.07, momentum=0.9,eval.metric=mx.metric.accuracy)
library(mxnet)
require(mxnet)
train.y = spam_data_train$spam
train.x = spam_data_train[,-1]
model = mx.mlp(train.x, train.y, hidden_node=10,  out_node=2,out_activation="softmax",num.round=20,array.batch.size=15,learning.rate=0.07, momentum=0.9,eval.metric=mx.metric.accuracy)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
install.packages("neuralnet")
install.packages("neuralnet")
require(neuralnet)
View(spam_data_train)
nn=neuralnet(spam~.,data=spam_data_train, hidden=60,act.fct = "logistic",
linear.output = FALSE)
plot(nn)
Predict=compute(nn,spam_data_test)
View(spam_data_test)
Predict$net.result
prob <- Predict$net.result
pred <- ifelse(prob>0.5, 1, 0)
pred
prob <- Predict$net.result >0.5
prob
prob <- Predict$net.result
prob
pred <- ifelse(prob>0.5, 1, 0)
prob <- Predict$net.result > 0.5
mean(spam_preds_test == spam_data_test$spam)
