install.packages(c('tinytex', 'rmarkdown'))
install.packages(c("tinytex", "rmarkdown"))
tinytex::install_tinytex()
install_tinytex(force = TRUE)
library(tinytex)
install_tinytex(force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
bodyfat = read.table("Bodyfat.csv")
bodyfat = read.csv("Bodyfat.csv")
head(bodyfat)
dat = read.csv("Bodyfat.csv")
BODYFAT = c(dat$Age,dat$Weight,dat$Height,dat$Age+dat$Weight+3*dat$Height)
head(BODYFAT)
BODYFAT = data.frame(dat$Age,dat$Weight,dat$Height,dat$Age+dat$Weight+3*dat$Height)
head(BODYFAT)
BODYFAT = data.frame("age"=dat$Age,"weight"=dat$Weight,"height"=dat$Height,"x4"=dat$Age+dat$Weight+3*dat$Height)
head(BODYFAT)
t(BODYFAT) %*% BODYFAT
X = as.matrix(BODYFAT)
X
BODYFAT = data.frame("age"=dat$Age,"weight"=dat$Weight,"height"=dat$Height,"x4"=dat$Age+10*dat$Weight+3*dat$Height)
X = as.matrix(BODYFAT)
t(X) %*% X
solve(t(X) %*% X)
det(t(X) %*% X)
a = t(X) %*% X
a
det(a)
determinant(a)
lm(BODYFAT)
summary(lm(BODYFAT))
X
dim(X)
X = 1+ as.matrix(BODYFAT)
X
X =  rep(1, nrow(BODYFAT))+as.matrix(BODYFAT)
X
X =  as.matrix(rep(1, nrow(BODYFAT)),BODYFAT)
X
BODYFAT["1"] = rep(1, nrow(BODYFAT))
BODYFAT
#Standard Errors of betahats
xmat = matrix(0, nrow(body), 5)
#Lecture Seven (Residual Sum of Squares, Multiple Rsquared, Standard Errors, Standardized or Studentized Residuals)
body = read.delim("bodyfat_corrected.txt", header = TRUE, sep = "")
dat = read.csv("Bodyfat.csv")
body = read.csv("Bodyfat.csv")
xmat = matrix(0, nrow(body), 5)
xmat
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$AGE
xmat[,2] = body$AGE
body$Age
length(body$Age)
dim(xmat)
xmat[,2] = body$AGE
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$AGE
xmat[,3] = body$WEIGHT
body = read.csv("Bodyfat.csv")
xmat = matrix(0, nrow(body), 5)
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$AGE
xmat[,3] = body$WEIGHT
xmat[,4] = body$HEIGHT
xmat[,5] = body$THIGH
BODYFAT["1"] = rep(1, nrow(BODYFAT))
body
dim(body)
body = read.csv("Bodyfat.csv")
xmat = matrix(0, nrow(body), 5)
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$AGE
#Standard Errors of betahats
xmat = matrix(0, nrow(body), 5)
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$AGE
xmat[,3] = body$WEIGHT
body$Age
body = read.csv("Bodyfat.csv")
xmat = matrix(0, nrow(body), 5)
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$AGE
xmat[,3] = body$WEIGHT
xmat
xmat[,2]
length(xmat[,2])
xmat[,2] = body$Age
xmat = matrix(0, nrow(body), 5)
xmat[,1] = rep(1, nrow(body))
xmat[,2] = body$Age
xmat[,3] = body$Weight
xmat[,4] = body$Height
xmat[,5] = body$Age + 10*body$Weight + 3*body$Height
qr(xmat)
Null(xmat)
function(M)
Null = function(M){
tmp <- qr(M)
set <- if(tmp$rank == 0L) seq_len(ncol(M)) else  -seq_len(tmp$rank)
qr.Q(tmp, complete = TRUE)[, set, drop = FALSE]
}
Null(xmat)
Null(xmat)
Null = function(M){
tmp <- qr(M)
set <- if(tmp$rank == 0L) seq_len(ncol(M)) else  -seq_len(tmp$rank)
qr.Q(tmp, complete = TRUE)[, set, drop = FALSE]
}
Null(xmat)
qr(xmat)
a = qr(xmat)
body$bodyfat
lmod = lm(body$bodyfat ~ xmat)
summary(lmod)
lmod1 = lm(body$bodyfat ~ body$Age+body$Weight+body$Height+body$Age + 10*body$Weight + 3*body$Height)
lmod1 = lm(body$bodyfat ~ body$Age+body$Weight+body$Height+(body$Age + 10*body$Weight + 3*body$Height))
lmod1 = lm(bodyfat ~ Age+Weight+Height+(Age + Weight + Height),data=body)
summary(lmod1)
solve(t(xmat) %*% xmat)
det(t(xmat) %*% xmat)
det(t(xmat) %*% xmat)
library(pracma)
install.packages("pracma")
library(pracma)
M <- matrix(1:12, 3, 4)
M
Rank(M)                 #=> 2
N <- nullspace(M)
N
N <- nullspace(xmat)
N
beta1
beta1 = c(0, 1, 0, 0, 0)
beta1
N
nu = N
nu
as.vector(nu)
(1,0)
a=c(1,0)
b=c(2,2)
a
b
a %*% b
a=c(1,3)
a %*% b
a
b
beta1 %*% N
knitr::opts_chunk$set(echo = TRUE)
library(pracma)
# Provides a large number of functions from numerical analysis and linear algebra, numerical optimization, differential equations, time series, plus some well-known special mathematical functions. Uses 'MATLAB' function names where appropriate to simplify porting.
lmod1 = lm(bodyfat ~ Age+Weight+Height+(Age + Weight + Height),data=body)
summary(lmod1)
bb = summary(lmod1)
bb$coefficients
summary(lmod1)coefficients
lmod1 = lm(bodyfat ~ Age+Weight+Height+(Age + Weight + Height),data=body)
summary(lmod1)coefficients
summary(lmod1)$coefficients
solve(t(xmat) %*% xmat)
#we notice that the matrix X's rank is 4, because the last column is the linear combination of the previous columns.
Rank(xmat)
summary(lmod1)$coefficients
#find the vector that spans the nullspace of X
x5 = nullspace(xmat)
x5
A = matrix(1,1,2,1,6,1)
A = matrix(1,1,2,1,6,1,3,2)
A = matrix(c(1,1,2,1,6,1),3,2)
a
A
A = matrix(c(1,1,2,1,6,1),3,2,byrow = TRUE)
A
svd(A)
svd_result =  svd(xmat)
svd_result
pseudoinverse
pinv(A)
round(pinv(A),3)
pseudo_inverse = pinv(xmat)
pseudo_inverse %*% body$bodyfat
test=xmat[1,4]
test
test=xmat[c(1,4)]
test
test=xmat[1,]
test
xmat
xmat[,1]
test=xmat[,c(1,2,3,4)]
test
lmod1 = lm(bodyfat ~ Age+Weight+Height,data=body)
summary(lmod1)
test
pseudo_inverse = pinv(test)
pseudo_inverse %*% body$bodyfat
A
ff = c(0.429,1.71)
A %*% ff
Rank(A)
nullspace(A)
# these are least square estimates of beta0 to beta4
esti = pseudo_inverse %*% body$bodyfat;esti
pseudo_inverse = pinv(xmat)
# these are least square estimates of beta0 to beta4
esti = pseudo_inverse %*% body$bodyfat;esti
#Then this vector is orthogonal to row space of X
esti + x5
x5
ss = c(0,1,0,0,0)
ss %*% x5
summary(lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight +
3*Height), data = body))
lmod1 = lm(bodyfat ~ Age+Weight+Height+(Age + Weight + Height),data=body)
summary(lmod1)$coefficients
body$Asummary(lmod1)
summary(lmod1)
summary(lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight +
3*Height), data = body))
summary(lm(bodyfat ~ Age + Weight + Height + I(20*Age + 10*Weight +
3*Height), data = body))
lmod1 = lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight +
summary(lmod1)$coefficients
lmod1 = lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight +
lmod1 = lm(bodyfat ~ Age + Weight + Height + I(Age + 10*Weight + 3*Height), data = body)
summary(lmod1)$coefficients
