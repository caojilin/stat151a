#average age for "Miss."
age1 = mean(train[grep("Miss",train$Name),]$Age,na.rm = TRUE)
#average age for "Mrs."
age2 = mean(train[grep("Mrs",train$Name),]$Age,na.rm=TRUE)
#average age for "Master."
age3 = mean(train[grep("Master",train$Name),]$Age,na.rm = TRUE)
#average age for "Mr."
age4 = mean(train[grep("Mr",train$Name),]$Age,na.rm = TRUE)
train$Age[grep("Miss",train$Name)]= age1
train$Age[grep("Mrs",train$Name)]= age2
train$Age[grep("Master",train$Name)]= age3
train$Age[grep("Mr",train$Name)]= age4
View(train)
test = read.csv("test.csv")
summary(train$Age)
c(age1,age2,age3,age4)
summary(train$Age)
which(is.na(train$Age))
train[767]
train[767,]
train$Age[grep("Dr",train$Name)] = age4
summary(train$Age)
pairs(train)
train$Name[grep("Miss",train$Name)]="Miss"
train$Name[grep("Mrs",train$Name)]="Mrs"
train$Name[grep("Master",train$Name)]="Master"
train$Name[grep("Miss",train$Name)]
train = read.csv("train.csv")
grep("Miss",train$Name)
train$Name[grep("Miss",train$Name)]
train$Name[grep("Miss",train$Name)] = "Miss"
train = read.csv("train.csv")
as.factor(train$Name[grep("Miss",train$Name)])
as.factor(train$Name[grep("Miss",train$Name)]) = "miss"
train$Name[grep("Miss",train$Name)]="Miss"
train$Name[grep("Mrs",train$Name)]="Mrs"
train$Name[grep("Master",train$Name)]="Master"
train$Age[grep("Mr",train$Name)]= "Mr"
train$Name[grep("Dr",train$Name)]="Mr"
train$Age[grep("Mr",train$Name)]= "Mr"
train = read.csv("train.csv")
train$Title[grep("Miss",train$Name)]="Miss"
train$Title[grep("Mrs",train$Name)]="Mrs"
train$Title = "NA"
train$Title[grep("Miss",train$Name)]="Miss"
train$Title[grep("Mrs",train$Name)]="Mrs"
train$Title[grep("Master",train$Name)]="Master"
train$Title[grep("Mr",train$Name)]= "Mr"
train$Title[grep("Dr",train$Name)]="Mr"
train = read.csv("train.csv")
#average age for "Miss."
age1 = mean(train[grep("Miss",train$Name),]$Age,na.rm = TRUE)
#average age for "Mrs."
age2 = mean(train[grep("Mrs",train$Name),]$Age,na.rm=TRUE)
#average age for "Master."
age3 = mean(train[grep("Master",train$Name),]$Age,na.rm = TRUE)
#average age for "Mr."
age4 = mean(train[grep("Mr",train$Name),]$Age,na.rm = TRUE)
train$Age[grep("Miss",train$Name)]= age1
train$Age[grep("Mrs",train$Name)]= age2
train$Age[grep("Master",train$Name)]= age3
train$Age[grep("Mr",train$Name)]= age4
train$Age[grep("Dr",train$Name)] = age4
summary(train$Age)
train$Title = "NA"
train$Title[grep("Miss",train$Name)]="Miss"
train$Title[grep("Mrs",train$Name)]="Mrs"
train$Title[grep("Master",train$Name)]="Master"
train$Title[grep("Mr",train$Name)]= "Mr"
train$Title[grep("Dr",train$Name)]="Mr"
#combine "Dr" and "Mr" since only one person is "Dr"
formula = "Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch"
model = glm(formula, family = "binomial", data=train)
summary(model)
table(train$Title)
which(is.na(train$Title))
which(grep("NA",train$Title))
grep("NA",train$Title)
train[grep("NA",train$Title)]
train$Name[grep("NA",train$Title)]
#average age for "Miss."
age1 = mean(train[grep("Miss",train$Name),]$Age,na.rm = TRUE)
#average age for "Mrs."
age2 = mean(train[grep("Mrs",train$Name),]$Age,na.rm=TRUE)
#average age for "Master."
age3 = mean(train[grep("Master",train$Name),]$Age,na.rm = TRUE)
#average age for "Mr."
age4 = mean(train[grep("Mr",train$Name),]$Age,na.rm = TRUE)
train$Age[grep("Miss",train$Name)]= age1
train$Age[grep("Mrs",train$Name)]= age2
train$Age[grep("Master",train$Name)]= age3
train$Age[grep("Mr",train$Name)]= age4
train$Age[grep("Dr",train$Name)] = age4
summary(train$Age)
train$Title = "Other"
train$Title[grep("Miss",train$Name)]="Miss"
train$Title[grep("Mrs",train$Name)]="Mrs"
train$Title[grep("Master",train$Name)]="Master"
train$Title[grep("Mr",train$Name)]= "Mr"
formula = "Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch"
model = glm(formula, family = "binomial", data=train)
summary(model)
rs = regsubsets(model)
knitr::opts_chunk$set(echo = TRUE)
library("model4you")
library(ggplot2)
library(faraway)
library(leaps)
library(car)
#check skewness
library(e1071)
library(stringr)
library(zoo)
rs = regsubsets(model)
rs = regsubsets(model)
rs = regsubsets(formula)
formula = "Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch"
rs = regsubsets(formula)
rs = regsubsets(Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch)
rs = regsubsets(Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch,data=train)
summary(rs)
rs=summary(regsubs.full)
rs=summary(rs)
par(mfrow=c(1,2))
plot(rs$adjr2 ,xlab="Number of Variables ", ylab="Adjusted R^2",type="l")
which.max(rs$adjr2)
points(x=8,y=rs$adjr2[8], col="red",cex=2,pch=20)
plot(rs$cp, xlab="Number of Variables ",ylab="Cp", type="l")
which.min(rs$cp)
points(8,rs$cp[8], col="red", cex=2, pch=20)
par(mfrow=c(1,2))
plot(rs$adjr2 ,xlab="Number of Variables ", ylab="Adjusted R^2",type="l")
plot(rs$cp, xlab="Number of Variables ",ylab="Cp", type="l")
which.min(rs$cp)
points(8,rs$cp[8], col="red", cex=2, pch=20)
plot(rs$cp, xlab="Number of Variables ",ylab="Cp", type="l")
which.min(rs$cp)
rs
min(rs$cp)
rs$cp
rs$bic
min(rs$bic  )
rs$which
rs = regsubsets(Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch+Embarked,data=train)
rs=summary(rs)
min(rs$bic)
rs$bic
rs$cp
rs$bic
rs$which
fit = predict(test, model)
fit = predict(model,test)
test$Title = "Other"
test$Title[grep("Miss",test$Name)]="Miss"
test$Title[grep("Mrs",test$Name)]="Mrs"
test$Title[grep("Master",test$Name)]="Master"
test$Title[grep("Mr",test$Name)]= "Mr"
fit = predict(model,test)
write.csv(fit)
write.csv(fit,file = "submmision.csv")
#average age for "Miss."
age1 = mean(test[grep("Miss",test$Name),]$Age,na.rm = TRUE)
#average age for "Mrs."
age2 = mean(test[grep("Mrs",test$Name),]$Age,na.rm=TRUE)
#average age for "Master."
age3 = mean(test[grep("Master",test$Name),]$Age,na.rm = TRUE)
#average age for "Mr."
age4 = mean(test[grep("Mr",test$Name),]$Age,na.rm = TRUE)
age1
age2
age3
age1
age4
summary(test$Age)
i = which(is.na(test$Age))
test[i,]
a = test[i,]
View(a)
test$Age[grep("Miss",test$Name)]= age1
test$Age[grep("Mrs",test$Name)]= age2
test$Age[grep("Master",test$Name)]= age3
test$Age[grep("Mr",test$Name)]= age4
summary(test$Age)
i = which(is.na(test$Age))
i
test[89,]
test$Age[grep("Miss",test$Name)]= age1
test$Age[grep("Mrs",test$Name)]= age2
test$Age[grep("Master",test$Name)]= age3
test$Age[grep("Mr",test$Name)]= age4
test$Age[grep("Ms",test$Name)]= age1
summary(test$Age)
fit = predict(model,test)
write.csv(fit,file = "submmision.csv")
survived = rep(NA,nrow(test))
View(t)
View(test)
fit = predict(model,test)
survived = rep(NA,nrow(test))
for (i in 1:nrow(test) ) {
if (fit[i] > 0.5) {
survived[i] = 1
}else{
survived[i] = 0
}
}
fit
fit = log(fit/(1-fit))
fit
fit = predict(model,test)
fit = exp(fit/1+fit)
fit
survived = rep(NA,418)
for (i in 1:418 ) {
if (fit[i] > 0.5) {
survived[i] = 1
}else{
survived[i] = 0
}
}
sort(fit)
fit
survived
fit[1]
fit[2]
fit = predict(model,test)
fit = exp(fit/1+fit)
fit
fit[1]
fit[2]
fit[3]
fit[4]
for (i in 1:418 ) {
if (fit[i] > 0.5) {
survived[i] = 1
}else{
survived[i] = 0
}
}
is.na(fit)
survived = rep(NA,418)
for (i in 1:418 ) {
if (fit[i] > 0.5) {
survived[i] = 1
}else{
survived[i] = 0
}
}
sur = rep(NA,418)
for (i in 1:418 ) {
if (fit[i] > 0.5) {
sur[i] = 1
}else{
sur[i] = 0
}
}
sur
fi[155]
fit[155]
fit = predict(model,test,type = 'response')
fit
fit = predict(model,test)
fit
?predcit
?predict
fit = exp(fit/1+fit)
fit
fit = predict(model,test,type = 'response')
ft
fit
sur = rep(NA,418)
for (i in 1:418 ) {
if (fit[i] > 0.5) {
sur[i] = 1
}else{
sur[i] = 0
}
}
fit
sur
sur = rep(2, 418)
sur
sur = rep(2, 418)
for (i in 1:418) {
if (fit[i] > 0.5){
sur[i] = 1
}else{
sur[i] = 0
}
}
fit[i] > 0.5
fit[2] > 0.5
fit[153]
fit[154]
rm(list = i)
rm(list = irm)
rm(i)
sur = rep(2, 418)
for (i in 1:418) {
if (fit[i] > 0.5){
sur[i] = 1
}else{
sur[i] = 0
}
}
fit
test[153,]
test$Fare[which(is.na(test$Fare))] = mean(test$Fare, na.rm = TRUE)
fit = predict(model,test,type = 'response')
sur = rep(2, 418)
for (i in 1:418) {
if (fit[i] > 0.5){
sur[i] = 1
}else{
sur[i] = 0
}
}
test$Survived = survived
write.csv(fit,file = "submmision.csv")
write.csv(test,file = "submmision.csv")
test$Survived = sur
write.csv(test,file = "submmision.csv")
test$Survived = sur
write.csv(test,file = "submmision.csv")
colnames(test)
write.csv(test[c("PassengerId","Survived")],file = "submmision.csv")
a=read.csv("submission.csv")
a=read.csv("submmision.csv")
a
test[c("PassengerId","Survived")]
write.csv(test[c("PassengerId","Survived")],file = "submmision.csv")
a=read.csv("submmision.csv")
a
write.csv(test[c("PassengerId","Survived")],file = "submmision.csv",row.names = FALSE)
fit = predict(model2,test,type = 'response')
model2 = glm(Survived ~ Title + Pclass + Sex + SibSp + Parch + Embarked,data=train)
fit = predict(model2,test,type = 'response')
sur = rep(2, 418)
for (i in 1:418) {
if (fit[i] > 0.5){
sur[i] = 1
}else{
sur[i] = 0
}
}
test$Survived = sur
write.csv(test[c("PassengerId","Survived")],file = "submmision.csv",row.names = FALSE)
fit = predict(model,test,type = 'response')
sur = rep(2, 418)
for (i in 1:418) {
if (fit[i] > 0.6){
sur[i] = 1
}else{
sur[i] = 0
}
}
test$Survived = sur
write.csv(test[c("PassengerId","Survived")],file = "submmision.csv",row.names = FALSE)
summary(model)
model
model.matrix(model)
as.factor(train$Pclass)
train
summary(train)
train$Pclass = as.factor(train$Pclass)
View(train)
test = read.csv("test.csv")
test$Pclass = as.factor(test$Pclass)
train = read.csv("train.csv")
train$Pclass = as.factor(train$Pclass)
#average age for "Miss."
age1 = mean(train[grep("Miss",train$Name),]$Age,na.rm = TRUE)
#average age for "Mrs."
age2 = mean(train[grep("Mrs",train$Name),]$Age,na.rm=TRUE)
#average age for "Master."
age3 = mean(train[grep("Master",train$Name),]$Age,na.rm = TRUE)
#average age for "Mr."
age4 = mean(train[grep("Mr",train$Name),]$Age,na.rm = TRUE)
train$Age[grep("Miss",train$Name)]= age1
train$Age[grep("Mrs",train$Name)]= age2
train$Age[grep("Master",train$Name)]= age3
train$Age[grep("Mr",train$Name)]= age4
train$Age[grep("Dr",train$Name)] = age4
summary(train$Age)
train$Title = "Other"
train$Title[grep("Miss",train$Name)]="Miss"
train$Title[grep("Mrs",train$Name)]="Mrs"
train$Title[grep("Master",train$Name)]="Master"
train$Title[grep("Mr",train$Name)]= "Mr"
#average age for "Miss."
age1 = mean(test[grep("Miss",test$Name),]$Age,na.rm = TRUE)
#average age for "Mrs."
age2 = mean(test[grep("Mrs",test$Name),]$Age,na.rm=TRUE)
#average age for "Master."
age3 = mean(test[grep("Master",test$Name),]$Age,na.rm = TRUE)
#average age for "Mr."
age4 = mean(test[grep("Mr",test$Name),]$Age,na.rm = TRUE)
test$Age[grep("Miss",test$Name)]= age1
test$Age[grep("Mrs",test$Name)]= age2
test$Age[grep("Master",test$Name)]= age3
test$Age[grep("Mr",test$Name)]= age4
test$Age[grep("Ms",test$Name)]= age1
summary(test$Age)
test$Title = "Other"
test$Title[grep("Miss",test$Name)]="Miss"
test$Title[grep("Mrs",test$Name)]="Mrs"
test$Title[grep("Master",test$Name)]="Master"
test$Title[grep("Mr",test$Name)]= "Mr"
test$Fare[which(is.na(test$Fare))] = mean(test$Fare, na.rm = TRUE)
formula = "Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch"
model = glm(formula, family = "binomial", data=train)
rs =summary(regsubsets(Survived ~ Title + Pclass + Sex + Age + Fare + SibSp + Parch+Embarked,data=train))
fit = predict(model,test,type = 'response')
sur = rep(2, 418)
for (i in 1:418) {
if (fit[i] > 0.6){
sur[i] = 1
}else{
sur[i] = 0
}
}
test$Survived = sur
write.csv(test[c("PassengerId","Survived")],file = "submmision.csv",row.names = FALSE)
summary(model)
model
model$fitted.values
head(model$fitted.values)
View(train)
library(DAAG)
data(frogs)
help(frogs)
pairs(frogs[,4:10], oma=c(2,2,2,2), cex=0.5)
#The scatter plots involving the variables distance and NoOfPools look a little odd. It makes sense to consider transforming them.
summary(frogs$distance)
plot(density(frogs$distance))
plot(density(log(frogs$distance)))
summary(frogs$NoOfPools)
plot(density(frogs$NoOfPools))
plot(density(log(frogs$NoOfPools)))
#Fit the logistic model:
frogs.glm0 <- glm(formula = pres.abs ~ altitude + log(distance) +
log(NoOfPools) + NoOfSites + avrain + meanmin + meanmax,
family = binomial, data = frogs)
# For probit:  binomial(link = "probit")
# Default link function for binomial is logit
summary(frogs.glm0)
#We will try to understand all the numbers in the above output starting with the coefficients.
#Fisher Scoring stands for an algorithm that is a minor modification of Newton's method. Essentially in Fisher Scoring, one replaces the Hessian matrix of the log-likelihood function by its expectation. For logistic regression, the Hessian matrix of the log-likelihood function does not involve y and hence for logistic regression, there is no difference between Newton's method (and IRLS or IWLS) and Fisher Scoring. For other generalized linear models, they might be different.
names(frogs.glm0)
frogs.glm0$coefficients
#The GLM coefficients via IRLS or IWLS
#The estimated beta obtained by the above glm function can also be deduced by manually going through the IRLS iterates (or by writing a for loop).
p = 7
#Repeat the following steps. For the first step, take beta_initial = 0.
#beta_initial = .01^2  *rnorm(p+1)#rep(0, (p+1))
#beta_initial = rep(0, (p+1))
beta_initial = lmod$coefficients
n = nrow(frogs)
Xmat = cbind(frogs$altitude, log(frogs$distance), log(frogs$NoOfPools), frogs$NoOfSites, frogs$avrain, frogs$meanmin, frogs$meanmax)
pvec = exp(beta_initial[1] + Xmat%*% beta_initial[-1])/(1 + exp(beta_initial[1] + Xmat%*%beta_initial[-1]))
wts = pvec*(1-pvec)
yvec = frogs$pres.abs
Z = log(pvec/(1-pvec)) + (yvec - pvec)/wts
pvec = exp(beta_initial[1] + Xmat%*% beta_initial[-1])/(1 + exp(beta_initial[1] + Xmat%*%beta_initial[-1]))
#Repeat the following steps. For the first step, take beta_initial = 0.
#beta_initial = .01^2  *rnorm(p+1)#rep(0, (p+1))
#beta_initial = rep(0, (p+1))
beta_initial = lmod$coefficients
#Fitted values in logistic regression
frogs.glm0$fitted.values
#Deviance
#Essentially deviance plays the role of residual sum of squares in logistic regression.
deviance(frogs.glm0)
#or
frogs.glm0$deviance
#How is it calculated?
#It equals (-2)*(maximized log likelihood)
#Calculate the maximum value of the log-likelihood
mll = sum(frogs$pres.abs * log(frogs.glm0$fitted.values)) + sum((1 - frogs$pres.abs)*log(1 - frogs.glm0$fitted.values))
-2*mll
#What is the null deviance:
frogs.glm0$null.deviance
#Null deviance is the deviance (-2*max log likelihood) in a model that only has the intercept term
#If the model only has the intercept term, then p_i is the same for each i and it is therefore fitted by the value:
ybar = mean(frogs$pres.abs)
n = nrow(frogs)
ybar
n
n*ybar
n*(1 - ybar)
#Thus the maximized log-likelihood in the model with only intercept is
mll.null = (n*ybar*log(ybar)) + (n*(1 - ybar)*log(1 - ybar))
-2*mll.null
sum(frogs$pres.abs*log(ybar)) + sum((1-frogs$pres.abs)*log(1-ybar))
sum(frogs$pres.abs*log(ybar)) + sum((1-frogs$pres.abs)*log(ybar))
sum(frogs$pres.abs*log(ybar)) + sum((1-frogs$pres.abs)*log(ybar))
n*ybar
table(frogs$pres.abs)
(1-frogs$pres.abs)
frogs$pres.abs
View(frogs)
n*ybar*log(ybar)
#What is the null deviance:
frogs.glm0$null.deviance
#Thus the maximized log-likelihood in the model with only intercept is
mll.null = (n*ybar*log(ybar)) + (n*(1 - ybar)*log(1 - ybar))
mll.null
-2*mll.null
#The degrees of freedom of the deviances equal (n - #parameters). For example, for the null deviance, the degrees of freedom equal (n-1). And for a model with p explanatory variables, the degrees of freedom for the residual deviance is (n-p-1).
frogs.glm0$df.residual
-139.9935
-139.9935*-2
